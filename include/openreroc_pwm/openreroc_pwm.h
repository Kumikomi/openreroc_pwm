// Generated by gencpp from file openreroc_pwm/openreroc_pwm.msg
// DO NOT EDIT!


#ifndef OPENREROC_PWM_MESSAGE_OPENREROC_PWM_H
#define OPENREROC_PWM_MESSAGE_OPENREROC_PWM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace openreroc_pwm
{
template <class ContainerAllocator>
struct openreroc_pwm_
{
  typedef openreroc_pwm_<ContainerAllocator> Type;

  openreroc_pwm_()
    : dir_left(0)
    , para_left(0)
    , dir_right(0)
    , para_right(0)  {
    }
  openreroc_pwm_(const ContainerAllocator& _alloc)
    : dir_left(0)
    , para_left(0)
    , dir_right(0)
    , para_right(0)  {
    }



   typedef uint8_t _dir_left_type;
  _dir_left_type dir_left;

   typedef uint16_t _para_left_type;
  _para_left_type para_left;

   typedef uint8_t _dir_right_type;
  _dir_right_type dir_right;

   typedef uint16_t _para_right_type;
  _para_right_type para_right;




  typedef boost::shared_ptr< ::openreroc_pwm::openreroc_pwm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::openreroc_pwm::openreroc_pwm_<ContainerAllocator> const> ConstPtr;

}; // struct openreroc_pwm_

typedef ::openreroc_pwm::openreroc_pwm_<std::allocator<void> > openreroc_pwm;

typedef boost::shared_ptr< ::openreroc_pwm::openreroc_pwm > openreroc_pwmPtr;
typedef boost::shared_ptr< ::openreroc_pwm::openreroc_pwm const> openreroc_pwmConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::openreroc_pwm::openreroc_pwm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::openreroc_pwm::openreroc_pwm_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace openreroc_pwm

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'openreroc_pwm': ['/home/kazushi/catkin_ws/src/openreroc_pwm/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::openreroc_pwm::openreroc_pwm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::openreroc_pwm::openreroc_pwm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openreroc_pwm::openreroc_pwm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openreroc_pwm::openreroc_pwm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openreroc_pwm::openreroc_pwm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openreroc_pwm::openreroc_pwm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::openreroc_pwm::openreroc_pwm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed3c0bb8fb3ec1d8a462796b904dc121";
  }

  static const char* value(const ::openreroc_pwm::openreroc_pwm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xed3c0bb8fb3ec1d8ULL;
  static const uint64_t static_value2 = 0xa462796b904dc121ULL;
};

template<class ContainerAllocator>
struct DataType< ::openreroc_pwm::openreroc_pwm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "openreroc_pwm/openreroc_pwm";
  }

  static const char* value(const ::openreroc_pwm::openreroc_pwm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::openreroc_pwm::openreroc_pwm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 dir_left\n\
uint16 para_left\n\
uint8 dir_right\n\
uint16 para_right\n\
";
  }

  static const char* value(const ::openreroc_pwm::openreroc_pwm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::openreroc_pwm::openreroc_pwm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dir_left);
      stream.next(m.para_left);
      stream.next(m.dir_right);
      stream.next(m.para_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct openreroc_pwm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::openreroc_pwm::openreroc_pwm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::openreroc_pwm::openreroc_pwm_<ContainerAllocator>& v)
  {
    s << indent << "dir_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dir_left);
    s << indent << "para_left: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.para_left);
    s << indent << "dir_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dir_right);
    s << indent << "para_right: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.para_right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENREROC_PWM_MESSAGE_OPENREROC_PWM_H
